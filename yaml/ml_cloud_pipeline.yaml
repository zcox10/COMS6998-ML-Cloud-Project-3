# PIPELINE DEFINITION
# Name: ml-cloud-pipeline
components:
  comp-data-preparation:
    executorLabel: exec-data-preparation
    inputDefinitions:
      parameters:
        controller_params:
          parameterType: STRUCT
        dynamics_params:
          parameterType: STRUCT
        gcs_file_paths:
          parameterType: STRUCT
        num_tests:
          parameterType: NUMBER_INTEGER
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRUCT
  comp-train-model:
    executorLabel: exec-train-model
    inputDefinitions:
      parameters:
        gcs_file_paths:
          parameterType: STRUCT
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRUCT
deploymentSpec:
  executors:
    exec-data-preparation:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - data_preparation
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef data_preparation(\n    num_tests: int, controller_params: dict,\
          \ dynamics_params: dict, gcs_file_paths: Dict[str, str]\n) -> Dict[str,\
          \ str]:\n\n    # imports\n    import logging\n\n    from src.data_pipeline\
          \ import DataPipeline\n    from src.utils.utils import Utils\n\n    # enable\
          \ logging\n    Utils().configure_component_logging(log_level=logging.INFO)\n\
          \n    # run data pipeline\n    return DataPipeline().run_data_pipeline(\n\
          \        num_tests=num_tests,\n        controller_params=controller_params,\n\
          \        dynamics_params=dynamics_params,\n        gcs_file_paths=gcs_file_paths,\n\
          \    )\n\n"
        image: gcr.io/zsc-personal/ml-cloud-pipeline:latest
    exec-train-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model(gcs_file_paths: Dict[str, str]) -> Dict[str, str]:\n\
          \n    # imports\n    import logging\n    import torch\n\n    from src.model_trainer\
          \ import ModelTrainer\n    from src.utils.utils import Utils\n\n    # enable\
          \ logging\n    Utils().configure_component_logging(log_level=logging.INFO)\n\
          \n    device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n    return\
          \ ModelTrainer(device=device).train(show_plot=False, gcs_file_paths=gcs_file_paths)\n\
          \n"
        image: gcr.io/zsc-personal/ml-cloud-pipeline:latest
pipelineInfo:
  name: ml-cloud-pipeline
root:
  dag:
    tasks:
      data-preparation:
        cachingOptions: {}
        componentRef:
          name: comp-data-preparation
        inputs:
          parameters:
            controller_params:
              runtimeValue:
                constant:
                  control_horizon: 1.0
                  data_collection: true
                  distance_weight: 2.5
                  num_candidates: 50.0
                  num_iterations: 10.0
                  prediction_horizon: 1.0
                  velocity_weight: 0.02
            dynamics_params:
              runtimeValue:
                constant:
                  dist_limit:
                  - 0.2
                  - 0.3
                  dt: 0.01
                  joint_viscous_friction: 0.1
                  link_length: 1.0
                  link_mass: 0.1
                  num_links: 2.0
                  time_limit: 2.5
            gcs_file_paths:
              runtimeValue:
                constant:
                  bucket_name: ml-cloud-kubeflow-pipeline-data
                  eval_data_path: eval/data
                  eval_plot_path: eval/plots
                  model_path: models
                  training_data_path: training_data
            num_tests:
              runtimeValue:
                constant: 1.0
        taskInfo:
          name: data-preparation
      train-model:
        cachingOptions: {}
        componentRef:
          name: comp-train-model
        dependentTasks:
        - data-preparation
        inputs:
          parameters:
            gcs_file_paths:
              runtimeValue:
                constant:
                  bucket_name: ml-cloud-kubeflow-pipeline-data
                  eval_data_path: eval/data
                  eval_plot_path: eval/plots
                  model_path: models
                  training_data_path: training_data
        taskInfo:
          name: train-model
schemaVersion: 2.1.0
sdkVersion: kfp-2.12.1
